// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lseqDb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lseqDb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lseqDb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lseqDb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lseqDb_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lseqDb_2eproto;
namespace lseqdb {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class DBItems;
struct DBItemsDefaultTypeInternal;
extern DBItemsDefaultTypeInternal _DBItems_default_instance_;
class DBItems_DbItem;
struct DBItems_DbItemDefaultTypeInternal;
extern DBItems_DbItemDefaultTypeInternal _DBItems_DbItem_default_instance_;
class EventsRequest;
struct EventsRequestDefaultTypeInternal;
extern EventsRequestDefaultTypeInternal _EventsRequest_default_instance_;
class LSeq;
struct LSeqDefaultTypeInternal;
extern LSeqDefaultTypeInternal _LSeq_default_instance_;
class PutRequest;
struct PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class ReplicaKey;
struct ReplicaKeyDefaultTypeInternal;
extern ReplicaKeyDefaultTypeInternal _ReplicaKey_default_instance_;
class SeekGetRequest;
struct SeekGetRequestDefaultTypeInternal;
extern SeekGetRequestDefaultTypeInternal _SeekGetRequest_default_instance_;
class SyncGetRequest;
struct SyncGetRequestDefaultTypeInternal;
extern SyncGetRequestDefaultTypeInternal _SyncGetRequest_default_instance_;
class Value;
struct ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace lseqdb
PROTOBUF_NAMESPACE_OPEN
template<> ::lseqdb::Config* Arena::CreateMaybeMessage<::lseqdb::Config>(Arena*);
template<> ::lseqdb::DBItems* Arena::CreateMaybeMessage<::lseqdb::DBItems>(Arena*);
template<> ::lseqdb::DBItems_DbItem* Arena::CreateMaybeMessage<::lseqdb::DBItems_DbItem>(Arena*);
template<> ::lseqdb::EventsRequest* Arena::CreateMaybeMessage<::lseqdb::EventsRequest>(Arena*);
template<> ::lseqdb::LSeq* Arena::CreateMaybeMessage<::lseqdb::LSeq>(Arena*);
template<> ::lseqdb::PutRequest* Arena::CreateMaybeMessage<::lseqdb::PutRequest>(Arena*);
template<> ::lseqdb::ReplicaKey* Arena::CreateMaybeMessage<::lseqdb::ReplicaKey>(Arena*);
template<> ::lseqdb::SeekGetRequest* Arena::CreateMaybeMessage<::lseqdb::SeekGetRequest>(Arena*);
template<> ::lseqdb::SyncGetRequest* Arena::CreateMaybeMessage<::lseqdb::SyncGetRequest>(Arena*);
template<> ::lseqdb::Value* Arena::CreateMaybeMessage<::lseqdb::Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lseqdb {

// ===================================================================

class ReplicaKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lseqdb.ReplicaKey) */ {
 public:
  inline ReplicaKey() : ReplicaKey(nullptr) {}
  ~ReplicaKey() override;
  explicit PROTOBUF_CONSTEXPR ReplicaKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicaKey(const ReplicaKey& from);
  ReplicaKey(ReplicaKey&& from) noexcept
    : ReplicaKey() {
    *this = ::std::move(from);
  }

  inline ReplicaKey& operator=(const ReplicaKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaKey& operator=(ReplicaKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicaKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicaKey* internal_default_instance() {
    return reinterpret_cast<const ReplicaKey*>(
               &_ReplicaKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReplicaKey& a, ReplicaKey& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicaKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicaKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplicaKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplicaKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplicaKey& from) {
    ReplicaKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicaKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lseqdb.ReplicaKey";
  }
  protected:
  explicit ReplicaKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional int32 replica_id = 2;
  bool has_replica_id() const;
  private:
  bool _internal_has_replica_id() const;
  public:
  void clear_replica_id();
  int32_t replica_id() const;
  void set_replica_id(int32_t value);
  private:
  int32_t _internal_replica_id() const;
  void _internal_set_replica_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lseqdb.ReplicaKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int32_t replica_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lseqDb_2eproto;
};
// -------------------------------------------------------------------

class Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lseqdb.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  ~Value() override;
  explicit PROTOBUF_CONSTEXPR Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value& default_instance() {
    return *internal_default_instance();
  }
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Value& from) {
    Value::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lseqdb.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kLseqFieldNumber = 2,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string lseq = 2;
  void clear_lseq();
  const std::string& lseq() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lseq(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lseq();
  PROTOBUF_NODISCARD std::string* release_lseq();
  void set_allocated_lseq(std::string* lseq);
  private:
  const std::string& _internal_lseq() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lseq(const std::string& value);
  std::string* _internal_mutable_lseq();
  public:

  // @@protoc_insertion_point(class_scope:lseqdb.Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lseq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lseqDb_2eproto;
};
// -------------------------------------------------------------------

class LSeq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lseqdb.LSeq) */ {
 public:
  inline LSeq() : LSeq(nullptr) {}
  ~LSeq() override;
  explicit PROTOBUF_CONSTEXPR LSeq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LSeq(const LSeq& from);
  LSeq(LSeq&& from) noexcept
    : LSeq() {
    *this = ::std::move(from);
  }

  inline LSeq& operator=(const LSeq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LSeq& operator=(LSeq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LSeq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LSeq* internal_default_instance() {
    return reinterpret_cast<const LSeq*>(
               &_LSeq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LSeq& a, LSeq& b) {
    a.Swap(&b);
  }
  inline void Swap(LSeq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LSeq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LSeq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LSeq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LSeq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LSeq& from) {
    LSeq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LSeq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lseqdb.LSeq";
  }
  protected:
  explicit LSeq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLseqFieldNumber = 1,
  };
  // string lseq = 1;
  void clear_lseq();
  const std::string& lseq() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lseq(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lseq();
  PROTOBUF_NODISCARD std::string* release_lseq();
  void set_allocated_lseq(std::string* lseq);
  private:
  const std::string& _internal_lseq() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lseq(const std::string& value);
  std::string* _internal_mutable_lseq();
  public:

  // @@protoc_insertion_point(class_scope:lseqdb.LSeq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lseq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lseqDb_2eproto;
};
// -------------------------------------------------------------------

class EventsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lseqdb.EventsRequest) */ {
 public:
  inline EventsRequest() : EventsRequest(nullptr) {}
  ~EventsRequest() override;
  explicit PROTOBUF_CONSTEXPR EventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventsRequest(const EventsRequest& from);
  EventsRequest(EventsRequest&& from) noexcept
    : EventsRequest() {
    *this = ::std::move(from);
  }

  inline EventsRequest& operator=(const EventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventsRequest& operator=(EventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventsRequest* internal_default_instance() {
    return reinterpret_cast<const EventsRequest*>(
               &_EventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventsRequest& a, EventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventsRequest& from) {
    EventsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lseqdb.EventsRequest";
  }
  protected:
  explicit EventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLseqFieldNumber = 2,
    kKeyFieldNumber = 3,
    kReplicaIdFieldNumber = 1,
    kLimitFieldNumber = 4,
  };
  // optional string lseq = 2;
  bool has_lseq() const;
  private:
  bool _internal_has_lseq() const;
  public:
  void clear_lseq();
  const std::string& lseq() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lseq(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lseq();
  PROTOBUF_NODISCARD std::string* release_lseq();
  void set_allocated_lseq(std::string* lseq);
  private:
  const std::string& _internal_lseq() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lseq(const std::string& value);
  std::string* _internal_mutable_lseq();
  public:

  // optional string key = 3;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 replica_id = 1;
  void clear_replica_id();
  int32_t replica_id() const;
  void set_replica_id(int32_t value);
  private:
  int32_t _internal_replica_id() const;
  void _internal_set_replica_id(int32_t value);
  public:

  // optional uint32 limit = 4;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  uint32_t limit() const;
  void set_limit(uint32_t value);
  private:
  uint32_t _internal_limit() const;
  void _internal_set_limit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lseqdb.EventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lseq_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int32_t replica_id_;
    uint32_t limit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lseqDb_2eproto;
};
// -------------------------------------------------------------------

class PutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lseqdb.PutRequest) */ {
 public:
  inline PutRequest() : PutRequest(nullptr) {}
  ~PutRequest() override;
  explicit PROTOBUF_CONSTEXPR PutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PutRequest(const PutRequest& from);
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PutRequest& from) {
    PutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lseqdb.PutRequest";
  }
  protected:
  explicit PutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:lseqdb.PutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lseqDb_2eproto;
};
// -------------------------------------------------------------------

class SeekGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lseqdb.SeekGetRequest) */ {
 public:
  inline SeekGetRequest() : SeekGetRequest(nullptr) {}
  ~SeekGetRequest() override;
  explicit PROTOBUF_CONSTEXPR SeekGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeekGetRequest(const SeekGetRequest& from);
  SeekGetRequest(SeekGetRequest&& from) noexcept
    : SeekGetRequest() {
    *this = ::std::move(from);
  }

  inline SeekGetRequest& operator=(const SeekGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekGetRequest& operator=(SeekGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeekGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeekGetRequest* internal_default_instance() {
    return reinterpret_cast<const SeekGetRequest*>(
               &_SeekGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SeekGetRequest& a, SeekGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeekGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeekGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeekGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeekGetRequest& from) {
    SeekGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lseqdb.SeekGetRequest";
  }
  protected:
  explicit SeekGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLseqFieldNumber = 1,
    kKeyFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // string lseq = 1;
  void clear_lseq();
  const std::string& lseq() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lseq(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lseq();
  PROTOBUF_NODISCARD std::string* release_lseq();
  void set_allocated_lseq(std::string* lseq);
  private:
  const std::string& _internal_lseq() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lseq(const std::string& value);
  std::string* _internal_mutable_lseq();
  public:

  // optional string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional uint32 limit = 3;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  uint32_t limit() const;
  void set_limit(uint32_t value);
  private:
  uint32_t _internal_limit() const;
  void _internal_set_limit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lseqdb.SeekGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lseq_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    uint32_t limit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lseqDb_2eproto;
};
// -------------------------------------------------------------------

class DBItems_DbItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lseqdb.DBItems.DbItem) */ {
 public:
  inline DBItems_DbItem() : DBItems_DbItem(nullptr) {}
  ~DBItems_DbItem() override;
  explicit PROTOBUF_CONSTEXPR DBItems_DbItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBItems_DbItem(const DBItems_DbItem& from);
  DBItems_DbItem(DBItems_DbItem&& from) noexcept
    : DBItems_DbItem() {
    *this = ::std::move(from);
  }

  inline DBItems_DbItem& operator=(const DBItems_DbItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBItems_DbItem& operator=(DBItems_DbItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBItems_DbItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBItems_DbItem* internal_default_instance() {
    return reinterpret_cast<const DBItems_DbItem*>(
               &_DBItems_DbItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DBItems_DbItem& a, DBItems_DbItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBItems_DbItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBItems_DbItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBItems_DbItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBItems_DbItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBItems_DbItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBItems_DbItem& from) {
    DBItems_DbItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBItems_DbItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lseqdb.DBItems.DbItem";
  }
  protected:
  explicit DBItems_DbItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLseqFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string lseq = 1;
  void clear_lseq();
  const std::string& lseq() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lseq(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lseq();
  PROTOBUF_NODISCARD std::string* release_lseq();
  void set_allocated_lseq(std::string* lseq);
  private:
  const std::string& _internal_lseq() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lseq(const std::string& value);
  std::string* _internal_mutable_lseq();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:lseqdb.DBItems.DbItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lseq_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lseqDb_2eproto;
};
// -------------------------------------------------------------------

class DBItems final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lseqdb.DBItems) */ {
 public:
  inline DBItems() : DBItems(nullptr) {}
  ~DBItems() override;
  explicit PROTOBUF_CONSTEXPR DBItems(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBItems(const DBItems& from);
  DBItems(DBItems&& from) noexcept
    : DBItems() {
    *this = ::std::move(from);
  }

  inline DBItems& operator=(const DBItems& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBItems& operator=(DBItems&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBItems& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBItems* internal_default_instance() {
    return reinterpret_cast<const DBItems*>(
               &_DBItems_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DBItems& a, DBItems& b) {
    a.Swap(&b);
  }
  inline void Swap(DBItems* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBItems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBItems* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBItems>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBItems& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBItems& from) {
    DBItems::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBItems* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lseqdb.DBItems";
  }
  protected:
  explicit DBItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DBItems_DbItem DbItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kReplicaIdFieldNumber = 2,
  };
  // repeated .lseqdb.DBItems.DbItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::lseqdb::DBItems_DbItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lseqdb::DBItems_DbItem >*
      mutable_items();
  private:
  const ::lseqdb::DBItems_DbItem& _internal_items(int index) const;
  ::lseqdb::DBItems_DbItem* _internal_add_items();
  public:
  const ::lseqdb::DBItems_DbItem& items(int index) const;
  ::lseqdb::DBItems_DbItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lseqdb::DBItems_DbItem >&
      items() const;

  // int32 replica_id = 2;
  void clear_replica_id();
  int32_t replica_id() const;
  void set_replica_id(int32_t value);
  private:
  int32_t _internal_replica_id() const;
  void _internal_set_replica_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lseqdb.DBItems)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lseqdb::DBItems_DbItem > items_;
    int32_t replica_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lseqDb_2eproto;
};
// -------------------------------------------------------------------

class Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lseqdb.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() override;
  explicit PROTOBUF_CONSTEXPR Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Config& from) {
    Config::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lseqdb.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfReplicaIdFieldNumber = 1,
    kMaxReplicaIdFieldNumber = 2,
  };
  // int32 self_replica_id = 1;
  void clear_self_replica_id();
  int32_t self_replica_id() const;
  void set_self_replica_id(int32_t value);
  private:
  int32_t _internal_self_replica_id() const;
  void _internal_set_self_replica_id(int32_t value);
  public:

  // int32 max_replica_id = 2;
  void clear_max_replica_id();
  int32_t max_replica_id() const;
  void set_max_replica_id(int32_t value);
  private:
  int32_t _internal_max_replica_id() const;
  void _internal_set_max_replica_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lseqdb.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t self_replica_id_;
    int32_t max_replica_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lseqDb_2eproto;
};
// -------------------------------------------------------------------

class SyncGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lseqdb.SyncGetRequest) */ {
 public:
  inline SyncGetRequest() : SyncGetRequest(nullptr) {}
  ~SyncGetRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncGetRequest(const SyncGetRequest& from);
  SyncGetRequest(SyncGetRequest&& from) noexcept
    : SyncGetRequest() {
    *this = ::std::move(from);
  }

  inline SyncGetRequest& operator=(const SyncGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetRequest& operator=(SyncGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncGetRequest* internal_default_instance() {
    return reinterpret_cast<const SyncGetRequest*>(
               &_SyncGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SyncGetRequest& a, SyncGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncGetRequest& from) {
    SyncGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lseqdb.SyncGetRequest";
  }
  protected:
  explicit SyncGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicaIdFieldNumber = 1,
  };
  // int32 replica_id = 1;
  void clear_replica_id();
  int32_t replica_id() const;
  void set_replica_id(int32_t value);
  private:
  int32_t _internal_replica_id() const;
  void _internal_set_replica_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lseqdb.SyncGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t replica_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lseqDb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReplicaKey

// string key = 1;
inline void ReplicaKey::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ReplicaKey::key() const {
  // @@protoc_insertion_point(field_get:lseqdb.ReplicaKey.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicaKey::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.ReplicaKey.key)
}
inline std::string* ReplicaKey::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:lseqdb.ReplicaKey.key)
  return _s;
}
inline const std::string& ReplicaKey::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ReplicaKey::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplicaKey::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplicaKey::release_key() {
  // @@protoc_insertion_point(field_release:lseqdb.ReplicaKey.key)
  return _impl_.key_.Release();
}
inline void ReplicaKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.ReplicaKey.key)
}

// optional int32 replica_id = 2;
inline bool ReplicaKey::_internal_has_replica_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReplicaKey::has_replica_id() const {
  return _internal_has_replica_id();
}
inline void ReplicaKey::clear_replica_id() {
  _impl_.replica_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ReplicaKey::_internal_replica_id() const {
  return _impl_.replica_id_;
}
inline int32_t ReplicaKey::replica_id() const {
  // @@protoc_insertion_point(field_get:lseqdb.ReplicaKey.replica_id)
  return _internal_replica_id();
}
inline void ReplicaKey::_internal_set_replica_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.replica_id_ = value;
}
inline void ReplicaKey::set_replica_id(int32_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:lseqdb.ReplicaKey.replica_id)
}

// -------------------------------------------------------------------

// Value

// string value = 1;
inline void Value::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Value::value() const {
  // @@protoc_insertion_point(field_get:lseqdb.Value.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Value::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.Value.value)
}
inline std::string* Value::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:lseqdb.Value.value)
  return _s;
}
inline const std::string& Value::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Value::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Value::release_value() {
  // @@protoc_insertion_point(field_release:lseqdb.Value.value)
  return _impl_.value_.Release();
}
inline void Value::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.Value.value)
}

// string lseq = 2;
inline void Value::clear_lseq() {
  _impl_.lseq_.ClearToEmpty();
}
inline const std::string& Value::lseq() const {
  // @@protoc_insertion_point(field_get:lseqdb.Value.lseq)
  return _internal_lseq();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Value::set_lseq(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lseq_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.Value.lseq)
}
inline std::string* Value::mutable_lseq() {
  std::string* _s = _internal_mutable_lseq();
  // @@protoc_insertion_point(field_mutable:lseqdb.Value.lseq)
  return _s;
}
inline const std::string& Value::_internal_lseq() const {
  return _impl_.lseq_.Get();
}
inline void Value::_internal_set_lseq(const std::string& value) {
  
  _impl_.lseq_.Set(value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_lseq() {
  
  return _impl_.lseq_.Mutable(GetArenaForAllocation());
}
inline std::string* Value::release_lseq() {
  // @@protoc_insertion_point(field_release:lseqdb.Value.lseq)
  return _impl_.lseq_.Release();
}
inline void Value::set_allocated_lseq(std::string* lseq) {
  if (lseq != nullptr) {
    
  } else {
    
  }
  _impl_.lseq_.SetAllocated(lseq, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lseq_.IsDefault()) {
    _impl_.lseq_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.Value.lseq)
}

// -------------------------------------------------------------------

// LSeq

// string lseq = 1;
inline void LSeq::clear_lseq() {
  _impl_.lseq_.ClearToEmpty();
}
inline const std::string& LSeq::lseq() const {
  // @@protoc_insertion_point(field_get:lseqdb.LSeq.lseq)
  return _internal_lseq();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LSeq::set_lseq(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lseq_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.LSeq.lseq)
}
inline std::string* LSeq::mutable_lseq() {
  std::string* _s = _internal_mutable_lseq();
  // @@protoc_insertion_point(field_mutable:lseqdb.LSeq.lseq)
  return _s;
}
inline const std::string& LSeq::_internal_lseq() const {
  return _impl_.lseq_.Get();
}
inline void LSeq::_internal_set_lseq(const std::string& value) {
  
  _impl_.lseq_.Set(value, GetArenaForAllocation());
}
inline std::string* LSeq::_internal_mutable_lseq() {
  
  return _impl_.lseq_.Mutable(GetArenaForAllocation());
}
inline std::string* LSeq::release_lseq() {
  // @@protoc_insertion_point(field_release:lseqdb.LSeq.lseq)
  return _impl_.lseq_.Release();
}
inline void LSeq::set_allocated_lseq(std::string* lseq) {
  if (lseq != nullptr) {
    
  } else {
    
  }
  _impl_.lseq_.SetAllocated(lseq, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lseq_.IsDefault()) {
    _impl_.lseq_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.LSeq.lseq)
}

// -------------------------------------------------------------------

// EventsRequest

// int32 replica_id = 1;
inline void EventsRequest::clear_replica_id() {
  _impl_.replica_id_ = 0;
}
inline int32_t EventsRequest::_internal_replica_id() const {
  return _impl_.replica_id_;
}
inline int32_t EventsRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:lseqdb.EventsRequest.replica_id)
  return _internal_replica_id();
}
inline void EventsRequest::_internal_set_replica_id(int32_t value) {
  
  _impl_.replica_id_ = value;
}
inline void EventsRequest::set_replica_id(int32_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:lseqdb.EventsRequest.replica_id)
}

// optional string lseq = 2;
inline bool EventsRequest::_internal_has_lseq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EventsRequest::has_lseq() const {
  return _internal_has_lseq();
}
inline void EventsRequest::clear_lseq() {
  _impl_.lseq_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventsRequest::lseq() const {
  // @@protoc_insertion_point(field_get:lseqdb.EventsRequest.lseq)
  return _internal_lseq();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventsRequest::set_lseq(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.lseq_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.EventsRequest.lseq)
}
inline std::string* EventsRequest::mutable_lseq() {
  std::string* _s = _internal_mutable_lseq();
  // @@protoc_insertion_point(field_mutable:lseqdb.EventsRequest.lseq)
  return _s;
}
inline const std::string& EventsRequest::_internal_lseq() const {
  return _impl_.lseq_.Get();
}
inline void EventsRequest::_internal_set_lseq(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lseq_.Set(value, GetArenaForAllocation());
}
inline std::string* EventsRequest::_internal_mutable_lseq() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.lseq_.Mutable(GetArenaForAllocation());
}
inline std::string* EventsRequest::release_lseq() {
  // @@protoc_insertion_point(field_release:lseqdb.EventsRequest.lseq)
  if (!_internal_has_lseq()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.lseq_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lseq_.IsDefault()) {
    _impl_.lseq_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EventsRequest::set_allocated_lseq(std::string* lseq) {
  if (lseq != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lseq_.SetAllocated(lseq, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lseq_.IsDefault()) {
    _impl_.lseq_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.EventsRequest.lseq)
}

// optional string key = 3;
inline bool EventsRequest::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EventsRequest::has_key() const {
  return _internal_has_key();
}
inline void EventsRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EventsRequest::key() const {
  // @@protoc_insertion_point(field_get:lseqdb.EventsRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventsRequest::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.EventsRequest.key)
}
inline std::string* EventsRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:lseqdb.EventsRequest.key)
  return _s;
}
inline const std::string& EventsRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void EventsRequest::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* EventsRequest::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* EventsRequest::release_key() {
  // @@protoc_insertion_point(field_release:lseqdb.EventsRequest.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EventsRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.EventsRequest.key)
}

// optional uint32 limit = 4;
inline bool EventsRequest::_internal_has_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EventsRequest::has_limit() const {
  return _internal_has_limit();
}
inline void EventsRequest::clear_limit() {
  _impl_.limit_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t EventsRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline uint32_t EventsRequest::limit() const {
  // @@protoc_insertion_point(field_get:lseqdb.EventsRequest.limit)
  return _internal_limit();
}
inline void EventsRequest::_internal_set_limit(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.limit_ = value;
}
inline void EventsRequest::set_limit(uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:lseqdb.EventsRequest.limit)
}

// -------------------------------------------------------------------

// PutRequest

// string key = 1;
inline void PutRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:lseqdb.PutRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.PutRequest.key)
}
inline std::string* PutRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:lseqdb.PutRequest.key)
  return _s;
}
inline const std::string& PutRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void PutRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* PutRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:lseqdb.PutRequest.key)
  return _impl_.key_.Release();
}
inline void PutRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.PutRequest.key)
}

// string value = 2;
inline void PutRequest::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:lseqdb.PutRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PutRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.PutRequest.value)
}
inline std::string* PutRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:lseqdb.PutRequest.value)
  return _s;
}
inline const std::string& PutRequest::_internal_value() const {
  return _impl_.value_.Get();
}
inline void PutRequest::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* PutRequest::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:lseqdb.PutRequest.value)
  return _impl_.value_.Release();
}
inline void PutRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.PutRequest.value)
}

// -------------------------------------------------------------------

// SeekGetRequest

// string lseq = 1;
inline void SeekGetRequest::clear_lseq() {
  _impl_.lseq_.ClearToEmpty();
}
inline const std::string& SeekGetRequest::lseq() const {
  // @@protoc_insertion_point(field_get:lseqdb.SeekGetRequest.lseq)
  return _internal_lseq();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeekGetRequest::set_lseq(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lseq_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.SeekGetRequest.lseq)
}
inline std::string* SeekGetRequest::mutable_lseq() {
  std::string* _s = _internal_mutable_lseq();
  // @@protoc_insertion_point(field_mutable:lseqdb.SeekGetRequest.lseq)
  return _s;
}
inline const std::string& SeekGetRequest::_internal_lseq() const {
  return _impl_.lseq_.Get();
}
inline void SeekGetRequest::_internal_set_lseq(const std::string& value) {
  
  _impl_.lseq_.Set(value, GetArenaForAllocation());
}
inline std::string* SeekGetRequest::_internal_mutable_lseq() {
  
  return _impl_.lseq_.Mutable(GetArenaForAllocation());
}
inline std::string* SeekGetRequest::release_lseq() {
  // @@protoc_insertion_point(field_release:lseqdb.SeekGetRequest.lseq)
  return _impl_.lseq_.Release();
}
inline void SeekGetRequest::set_allocated_lseq(std::string* lseq) {
  if (lseq != nullptr) {
    
  } else {
    
  }
  _impl_.lseq_.SetAllocated(lseq, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lseq_.IsDefault()) {
    _impl_.lseq_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.SeekGetRequest.lseq)
}

// optional string key = 2;
inline bool SeekGetRequest::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SeekGetRequest::has_key() const {
  return _internal_has_key();
}
inline void SeekGetRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SeekGetRequest::key() const {
  // @@protoc_insertion_point(field_get:lseqdb.SeekGetRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeekGetRequest::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.SeekGetRequest.key)
}
inline std::string* SeekGetRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:lseqdb.SeekGetRequest.key)
  return _s;
}
inline const std::string& SeekGetRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void SeekGetRequest::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* SeekGetRequest::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* SeekGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:lseqdb.SeekGetRequest.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SeekGetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.SeekGetRequest.key)
}

// optional uint32 limit = 3;
inline bool SeekGetRequest::_internal_has_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SeekGetRequest::has_limit() const {
  return _internal_has_limit();
}
inline void SeekGetRequest::clear_limit() {
  _impl_.limit_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t SeekGetRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline uint32_t SeekGetRequest::limit() const {
  // @@protoc_insertion_point(field_get:lseqdb.SeekGetRequest.limit)
  return _internal_limit();
}
inline void SeekGetRequest::_internal_set_limit(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.limit_ = value;
}
inline void SeekGetRequest::set_limit(uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:lseqdb.SeekGetRequest.limit)
}

// -------------------------------------------------------------------

// DBItems_DbItem

// string lseq = 1;
inline void DBItems_DbItem::clear_lseq() {
  _impl_.lseq_.ClearToEmpty();
}
inline const std::string& DBItems_DbItem::lseq() const {
  // @@protoc_insertion_point(field_get:lseqdb.DBItems.DbItem.lseq)
  return _internal_lseq();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBItems_DbItem::set_lseq(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lseq_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.DBItems.DbItem.lseq)
}
inline std::string* DBItems_DbItem::mutable_lseq() {
  std::string* _s = _internal_mutable_lseq();
  // @@protoc_insertion_point(field_mutable:lseqdb.DBItems.DbItem.lseq)
  return _s;
}
inline const std::string& DBItems_DbItem::_internal_lseq() const {
  return _impl_.lseq_.Get();
}
inline void DBItems_DbItem::_internal_set_lseq(const std::string& value) {
  
  _impl_.lseq_.Set(value, GetArenaForAllocation());
}
inline std::string* DBItems_DbItem::_internal_mutable_lseq() {
  
  return _impl_.lseq_.Mutable(GetArenaForAllocation());
}
inline std::string* DBItems_DbItem::release_lseq() {
  // @@protoc_insertion_point(field_release:lseqdb.DBItems.DbItem.lseq)
  return _impl_.lseq_.Release();
}
inline void DBItems_DbItem::set_allocated_lseq(std::string* lseq) {
  if (lseq != nullptr) {
    
  } else {
    
  }
  _impl_.lseq_.SetAllocated(lseq, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lseq_.IsDefault()) {
    _impl_.lseq_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.DBItems.DbItem.lseq)
}

// string key = 2;
inline void DBItems_DbItem::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& DBItems_DbItem::key() const {
  // @@protoc_insertion_point(field_get:lseqdb.DBItems.DbItem.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBItems_DbItem::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.DBItems.DbItem.key)
}
inline std::string* DBItems_DbItem::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:lseqdb.DBItems.DbItem.key)
  return _s;
}
inline const std::string& DBItems_DbItem::_internal_key() const {
  return _impl_.key_.Get();
}
inline void DBItems_DbItem::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* DBItems_DbItem::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* DBItems_DbItem::release_key() {
  // @@protoc_insertion_point(field_release:lseqdb.DBItems.DbItem.key)
  return _impl_.key_.Release();
}
inline void DBItems_DbItem::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.DBItems.DbItem.key)
}

// string value = 3;
inline void DBItems_DbItem::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& DBItems_DbItem::value() const {
  // @@protoc_insertion_point(field_get:lseqdb.DBItems.DbItem.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBItems_DbItem::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lseqdb.DBItems.DbItem.value)
}
inline std::string* DBItems_DbItem::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:lseqdb.DBItems.DbItem.value)
  return _s;
}
inline const std::string& DBItems_DbItem::_internal_value() const {
  return _impl_.value_.Get();
}
inline void DBItems_DbItem::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* DBItems_DbItem::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* DBItems_DbItem::release_value() {
  // @@protoc_insertion_point(field_release:lseqdb.DBItems.DbItem.value)
  return _impl_.value_.Release();
}
inline void DBItems_DbItem::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lseqdb.DBItems.DbItem.value)
}

// -------------------------------------------------------------------

// DBItems

// repeated .lseqdb.DBItems.DbItem items = 1;
inline int DBItems::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int DBItems::items_size() const {
  return _internal_items_size();
}
inline void DBItems::clear_items() {
  _impl_.items_.Clear();
}
inline ::lseqdb::DBItems_DbItem* DBItems::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:lseqdb.DBItems.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lseqdb::DBItems_DbItem >*
DBItems::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:lseqdb.DBItems.items)
  return &_impl_.items_;
}
inline const ::lseqdb::DBItems_DbItem& DBItems::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::lseqdb::DBItems_DbItem& DBItems::items(int index) const {
  // @@protoc_insertion_point(field_get:lseqdb.DBItems.items)
  return _internal_items(index);
}
inline ::lseqdb::DBItems_DbItem* DBItems::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::lseqdb::DBItems_DbItem* DBItems::add_items() {
  ::lseqdb::DBItems_DbItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:lseqdb.DBItems.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lseqdb::DBItems_DbItem >&
DBItems::items() const {
  // @@protoc_insertion_point(field_list:lseqdb.DBItems.items)
  return _impl_.items_;
}

// int32 replica_id = 2;
inline void DBItems::clear_replica_id() {
  _impl_.replica_id_ = 0;
}
inline int32_t DBItems::_internal_replica_id() const {
  return _impl_.replica_id_;
}
inline int32_t DBItems::replica_id() const {
  // @@protoc_insertion_point(field_get:lseqdb.DBItems.replica_id)
  return _internal_replica_id();
}
inline void DBItems::_internal_set_replica_id(int32_t value) {
  
  _impl_.replica_id_ = value;
}
inline void DBItems::set_replica_id(int32_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:lseqdb.DBItems.replica_id)
}

// -------------------------------------------------------------------

// Config

// int32 self_replica_id = 1;
inline void Config::clear_self_replica_id() {
  _impl_.self_replica_id_ = 0;
}
inline int32_t Config::_internal_self_replica_id() const {
  return _impl_.self_replica_id_;
}
inline int32_t Config::self_replica_id() const {
  // @@protoc_insertion_point(field_get:lseqdb.Config.self_replica_id)
  return _internal_self_replica_id();
}
inline void Config::_internal_set_self_replica_id(int32_t value) {
  
  _impl_.self_replica_id_ = value;
}
inline void Config::set_self_replica_id(int32_t value) {
  _internal_set_self_replica_id(value);
  // @@protoc_insertion_point(field_set:lseqdb.Config.self_replica_id)
}

// int32 max_replica_id = 2;
inline void Config::clear_max_replica_id() {
  _impl_.max_replica_id_ = 0;
}
inline int32_t Config::_internal_max_replica_id() const {
  return _impl_.max_replica_id_;
}
inline int32_t Config::max_replica_id() const {
  // @@protoc_insertion_point(field_get:lseqdb.Config.max_replica_id)
  return _internal_max_replica_id();
}
inline void Config::_internal_set_max_replica_id(int32_t value) {
  
  _impl_.max_replica_id_ = value;
}
inline void Config::set_max_replica_id(int32_t value) {
  _internal_set_max_replica_id(value);
  // @@protoc_insertion_point(field_set:lseqdb.Config.max_replica_id)
}

// -------------------------------------------------------------------

// SyncGetRequest

// int32 replica_id = 1;
inline void SyncGetRequest::clear_replica_id() {
  _impl_.replica_id_ = 0;
}
inline int32_t SyncGetRequest::_internal_replica_id() const {
  return _impl_.replica_id_;
}
inline int32_t SyncGetRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:lseqdb.SyncGetRequest.replica_id)
  return _internal_replica_id();
}
inline void SyncGetRequest::_internal_set_replica_id(int32_t value) {
  
  _impl_.replica_id_ = value;
}
inline void SyncGetRequest::set_replica_id(int32_t value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:lseqdb.SyncGetRequest.replica_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lseqdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lseqDb_2eproto
