// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lseqDb.proto

#include "lseqDb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace lseqdb {
PROTOBUF_CONSTEXPR ReplicaKey::ReplicaKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.replica_id_)*/0} {}
struct ReplicaKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplicaKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplicaKeyDefaultTypeInternal() {}
  union {
    ReplicaKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplicaKeyDefaultTypeInternal _ReplicaKey_default_instance_;
PROTOBUF_CONSTEXPR Value::Value(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lseq_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;
PROTOBUF_CONSTEXPR LSeq::LSeq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lseq_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LSeqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LSeqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LSeqDefaultTypeInternal() {}
  union {
    LSeq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LSeqDefaultTypeInternal _LSeq_default_instance_;
PROTOBUF_CONSTEXPR EventsRequest::EventsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lseq_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.replica_id_)*/0
  , /*decltype(_impl_.limit_)*/0u} {}
struct EventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventsRequestDefaultTypeInternal() {}
  union {
    EventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventsRequestDefaultTypeInternal _EventsRequest_default_instance_;
PROTOBUF_CONSTEXPR PutRequest::PutRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutRequestDefaultTypeInternal() {}
  union {
    PutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutRequestDefaultTypeInternal _PutRequest_default_instance_;
PROTOBUF_CONSTEXPR SeekGetRequest::SeekGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lseq_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0u} {}
struct SeekGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeekGetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeekGetRequestDefaultTypeInternal() {}
  union {
    SeekGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeekGetRequestDefaultTypeInternal _SeekGetRequest_default_instance_;
PROTOBUF_CONSTEXPR DBItems_DbItem::DBItems_DbItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lseq_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBItems_DbItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBItems_DbItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBItems_DbItemDefaultTypeInternal() {}
  union {
    DBItems_DbItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBItems_DbItemDefaultTypeInternal _DBItems_DbItem_default_instance_;
PROTOBUF_CONSTEXPR DBItems::DBItems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.replica_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBItemsDefaultTypeInternal() {}
  union {
    DBItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBItemsDefaultTypeInternal _DBItems_default_instance_;
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.self_replica_id_)*/0
  , /*decltype(_impl_.max_replica_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
PROTOBUF_CONSTEXPR SyncGetRequest::SyncGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replica_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SyncGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncGetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncGetRequestDefaultTypeInternal() {}
  union {
    SyncGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncGetRequestDefaultTypeInternal _SyncGetRequest_default_instance_;
}  // namespace lseqdb
static ::_pb::Metadata file_level_metadata_lseqDb_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_lseqDb_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_lseqDb_2eproto = nullptr;

const uint32_t TableStruct_lseqDb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lseqdb::ReplicaKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::ReplicaKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lseqdb::ReplicaKey, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::ReplicaKey, _impl_.replica_id_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lseqdb::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lseqdb::Value, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::Value, _impl_.lseq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lseqdb::LSeq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lseqdb::LSeq, _impl_.lseq_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::EventsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::EventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lseqdb::EventsRequest, _impl_.replica_id_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::EventsRequest, _impl_.lseq_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::EventsRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::EventsRequest, _impl_.limit_),
  ~0u,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lseqdb::PutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lseqdb::PutRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::PutRequest, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::SeekGetRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::SeekGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lseqdb::SeekGetRequest, _impl_.lseq_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::SeekGetRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::SeekGetRequest, _impl_.limit_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lseqdb::DBItems_DbItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lseqdb::DBItems_DbItem, _impl_.lseq_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::DBItems_DbItem, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::DBItems_DbItem, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lseqdb::DBItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lseqdb::DBItems, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::DBItems, _impl_.replica_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lseqdb::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lseqdb::Config, _impl_.self_replica_id_),
  PROTOBUF_FIELD_OFFSET(::lseqdb::Config, _impl_.max_replica_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lseqdb::SyncGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lseqdb::SyncGetRequest, _impl_.replica_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::lseqdb::ReplicaKey)},
  { 10, -1, -1, sizeof(::lseqdb::Value)},
  { 18, -1, -1, sizeof(::lseqdb::LSeq)},
  { 25, 35, -1, sizeof(::lseqdb::EventsRequest)},
  { 39, -1, -1, sizeof(::lseqdb::PutRequest)},
  { 47, 56, -1, sizeof(::lseqdb::SeekGetRequest)},
  { 59, -1, -1, sizeof(::lseqdb::DBItems_DbItem)},
  { 68, -1, -1, sizeof(::lseqdb::DBItems)},
  { 76, -1, -1, sizeof(::lseqdb::Config)},
  { 84, -1, -1, sizeof(::lseqdb::SyncGetRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::lseqdb::_ReplicaKey_default_instance_._instance,
  &::lseqdb::_Value_default_instance_._instance,
  &::lseqdb::_LSeq_default_instance_._instance,
  &::lseqdb::_EventsRequest_default_instance_._instance,
  &::lseqdb::_PutRequest_default_instance_._instance,
  &::lseqdb::_SeekGetRequest_default_instance_._instance,
  &::lseqdb::_DBItems_DbItem_default_instance_._instance,
  &::lseqdb::_DBItems_default_instance_._instance,
  &::lseqdb::_Config_default_instance_._instance,
  &::lseqdb::_SyncGetRequest_default_instance_._instance,
};

const char descriptor_table_protodef_lseqDb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014lseqDb.proto\022\006lseqdb\032\033google/protobuf/"
  "empty.proto\"A\n\nReplicaKey\022\013\n\003key\030\001 \001(\t\022\027"
  "\n\nreplica_id\030\002 \001(\005H\000\210\001\001B\r\n\013_replica_id\"$"
  "\n\005Value\022\r\n\005value\030\001 \001(\t\022\014\n\004lseq\030\002 \001(\t\"\024\n\004"
  "LSeq\022\014\n\004lseq\030\001 \001(\t\"w\n\rEventsRequest\022\022\n\nr"
  "eplica_id\030\001 \001(\005\022\021\n\004lseq\030\002 \001(\tH\000\210\001\001\022\020\n\003ke"
  "y\030\003 \001(\tH\001\210\001\001\022\022\n\005limit\030\004 \001(\rH\002\210\001\001B\007\n\005_lse"
  "qB\006\n\004_keyB\010\n\006_limit\"(\n\nPutRequest\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"V\n\016SeekGetRequest\022"
  "\014\n\004lseq\030\001 \001(\t\022\020\n\003key\030\002 \001(\tH\000\210\001\001\022\022\n\005limit"
  "\030\003 \001(\rH\001\210\001\001B\006\n\004_keyB\010\n\006_limit\"x\n\007DBItems"
  "\022%\n\005items\030\001 \003(\0132\026.lseqdb.DBItems.DbItem\022"
  "\022\n\nreplica_id\030\002 \001(\005\0322\n\006DbItem\022\014\n\004lseq\030\001 "
  "\001(\t\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"9\n\006Confi"
  "g\022\027\n\017self_replica_id\030\001 \001(\005\022\026\n\016max_replic"
  "a_id\030\002 \001(\005\"$\n\016SyncGetRequest\022\022\n\nreplica_"
  "id\030\001 \001(\0052\200\003\n\014LSeqDatabase\022/\n\010GetValue\022\022."
  "lseqdb.ReplicaKey\032\r.lseqdb.Value\"\000\022)\n\003Pu"
  "t\022\022.lseqdb.PutRequest\032\014.lseqdb.LSeq\"\000\0224\n"
  "\007SeekGet\022\026.lseqdb.SeekGetRequest\032\017.lseqd"
  "b.DBItems\"\000\022<\n\020GetReplicaEvents\022\025.lseqdb"
  ".EventsRequest\032\017.lseqdb.DBItems\"\000\0225\n\tGet"
  "Config\022\026.google.protobuf.Empty\032\016.lseqdb."
  "Config\"\000\0222\n\010SyncGet_\022\026.lseqdb.SyncGetReq"
  "uest\032\014.lseqdb.LSeq\"\000\0225\n\010SyncPut_\022\017.lseqd"
  "b.DBItems\032\026.google.protobuf.Empty\"\000b\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_lseqDb_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_lseqDb_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lseqDb_2eproto = {
    false, false, 1043, descriptor_table_protodef_lseqDb_2eproto,
    "lseqDb.proto",
    &descriptor_table_lseqDb_2eproto_once, descriptor_table_lseqDb_2eproto_deps, 1, 10,
    schemas, file_default_instances, TableStruct_lseqDb_2eproto::offsets,
    file_level_metadata_lseqDb_2eproto, file_level_enum_descriptors_lseqDb_2eproto,
    file_level_service_descriptors_lseqDb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lseqDb_2eproto_getter() {
  return &descriptor_table_lseqDb_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lseqDb_2eproto(&descriptor_table_lseqDb_2eproto);
namespace lseqdb {

// ===================================================================

class ReplicaKey::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplicaKey>()._impl_._has_bits_);
  static void set_has_replica_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReplicaKey::ReplicaKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lseqdb.ReplicaKey)
}
ReplicaKey::ReplicaKey(const ReplicaKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReplicaKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.replica_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.replica_id_ = from._impl_.replica_id_;
  // @@protoc_insertion_point(copy_constructor:lseqdb.ReplicaKey)
}

inline void ReplicaKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.replica_id_){0}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReplicaKey::~ReplicaKey() {
  // @@protoc_insertion_point(destructor:lseqdb.ReplicaKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReplicaKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void ReplicaKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReplicaKey::Clear() {
// @@protoc_insertion_point(message_clear_start:lseqdb.ReplicaKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.replica_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.ReplicaKey.key"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 replica_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_replica_id(&has_bits);
          _impl_.replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReplicaKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lseqdb.ReplicaKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.ReplicaKey.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional int32 replica_id = 2;
  if (_internal_has_replica_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_replica_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lseqdb.ReplicaKey)
  return target;
}

size_t ReplicaKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lseqdb.ReplicaKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // optional int32 replica_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replica_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReplicaKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReplicaKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReplicaKey::GetClassData() const { return &_class_data_; }


void ReplicaKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReplicaKey*>(&to_msg);
  auto& from = static_cast<const ReplicaKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lseqdb.ReplicaKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_has_replica_id()) {
    _this->_internal_set_replica_id(from._internal_replica_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReplicaKey::CopyFrom(const ReplicaKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lseqdb.ReplicaKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaKey::IsInitialized() const {
  return true;
}

void ReplicaKey::InternalSwap(ReplicaKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.replica_id_, other->_impl_.replica_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lseqDb_2eproto_getter, &descriptor_table_lseqDb_2eproto_once,
      file_level_metadata_lseqDb_2eproto[0]);
}

// ===================================================================

class Value::_Internal {
 public:
};

Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lseqdb.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Value* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.lseq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lseq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lseq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lseq().empty()) {
    _this->_impl_.lseq_.Set(from._internal_lseq(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lseqdb.Value)
}

inline void Value::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.lseq_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lseq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lseq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:lseqdb.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  _impl_.lseq_.Destroy();
}

void Value::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:lseqdb.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _impl_.lseq_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.Value.value"));
        } else
          goto handle_unusual;
        continue;
      // string lseq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lseq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.Value.lseq"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lseqdb.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.Value.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // string lseq = 2;
  if (!this->_internal_lseq().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lseq().data(), static_cast<int>(this->_internal_lseq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.Value.lseq");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lseq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lseqdb.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lseqdb.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string lseq = 2;
  if (!this->_internal_lseq().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lseq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Value::GetClassData() const { return &_class_data_; }


void Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Value*>(&to_msg);
  auto& from = static_cast<const Value&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lseqdb.Value)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_lseq().empty()) {
    _this->_internal_set_lseq(from._internal_lseq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lseqdb.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lseq_, lhs_arena,
      &other->_impl_.lseq_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lseqDb_2eproto_getter, &descriptor_table_lseqDb_2eproto_once,
      file_level_metadata_lseqDb_2eproto[1]);
}

// ===================================================================

class LSeq::_Internal {
 public:
};

LSeq::LSeq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lseqdb.LSeq)
}
LSeq::LSeq(const LSeq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LSeq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lseq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lseq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lseq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lseq().empty()) {
    _this->_impl_.lseq_.Set(from._internal_lseq(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lseqdb.LSeq)
}

inline void LSeq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lseq_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lseq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lseq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LSeq::~LSeq() {
  // @@protoc_insertion_point(destructor:lseqdb.LSeq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LSeq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lseq_.Destroy();
}

void LSeq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LSeq::Clear() {
// @@protoc_insertion_point(message_clear_start:lseqdb.LSeq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lseq_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LSeq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lseq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lseq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.LSeq.lseq"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LSeq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lseqdb.LSeq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lseq = 1;
  if (!this->_internal_lseq().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lseq().data(), static_cast<int>(this->_internal_lseq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.LSeq.lseq");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lseq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lseqdb.LSeq)
  return target;
}

size_t LSeq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lseqdb.LSeq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lseq = 1;
  if (!this->_internal_lseq().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lseq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LSeq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LSeq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LSeq::GetClassData() const { return &_class_data_; }


void LSeq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LSeq*>(&to_msg);
  auto& from = static_cast<const LSeq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lseqdb.LSeq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lseq().empty()) {
    _this->_internal_set_lseq(from._internal_lseq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LSeq::CopyFrom(const LSeq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lseqdb.LSeq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSeq::IsInitialized() const {
  return true;
}

void LSeq::InternalSwap(LSeq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lseq_, lhs_arena,
      &other->_impl_.lseq_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LSeq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lseqDb_2eproto_getter, &descriptor_table_lseqDb_2eproto_once,
      file_level_metadata_lseqDb_2eproto[2]);
}

// ===================================================================

class EventsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EventsRequest>()._impl_._has_bits_);
  static void set_has_lseq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EventsRequest::EventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lseqdb.EventsRequest)
}
EventsRequest::EventsRequest(const EventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lseq_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.replica_id_){}
    , decltype(_impl_.limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lseq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lseq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lseq()) {
    _this->_impl_.lseq_.Set(from._internal_lseq(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.replica_id_, &from._impl_.replica_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.replica_id_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:lseqdb.EventsRequest)
}

inline void EventsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lseq_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.replica_id_){0}
    , decltype(_impl_.limit_){0u}
  };
  _impl_.lseq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lseq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventsRequest::~EventsRequest() {
  // @@protoc_insertion_point(destructor:lseqdb.EventsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lseq_.Destroy();
  _impl_.key_.Destroy();
}

void EventsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lseqdb.EventsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.lseq_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.replica_id_ = 0;
  _impl_.limit_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 replica_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lseq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lseq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.EventsRequest.lseq"));
        } else
          goto handle_unusual;
        continue;
      // optional string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.EventsRequest.key"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_limit(&has_bits);
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lseqdb.EventsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 replica_id = 1;
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_replica_id(), target);
  }

  // optional string lseq = 2;
  if (_internal_has_lseq()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lseq().data(), static_cast<int>(this->_internal_lseq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.EventsRequest.lseq");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lseq(), target);
  }

  // optional string key = 3;
  if (_internal_has_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.EventsRequest.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // optional uint32 limit = 4;
  if (_internal_has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lseqdb.EventsRequest)
  return target;
}

size_t EventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lseqdb.EventsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string lseq = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lseq());
    }

    // optional string key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

  }
  // int32 replica_id = 1;
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replica_id());
  }

  // optional uint32 limit = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventsRequest::GetClassData() const { return &_class_data_; }


void EventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventsRequest*>(&to_msg);
  auto& from = static_cast<const EventsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lseqdb.EventsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_lseq(from._internal_lseq());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_key(from._internal_key());
    }
  }
  if (from._internal_replica_id() != 0) {
    _this->_internal_set_replica_id(from._internal_replica_id());
  }
  if (cached_has_bits & 0x00000004u) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventsRequest::CopyFrom(const EventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lseqdb.EventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsRequest::IsInitialized() const {
  return true;
}

void EventsRequest::InternalSwap(EventsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lseq_, lhs_arena,
      &other->_impl_.lseq_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventsRequest, _impl_.limit_)
      + sizeof(EventsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(EventsRequest, _impl_.replica_id_)>(
          reinterpret_cast<char*>(&_impl_.replica_id_),
          reinterpret_cast<char*>(&other->_impl_.replica_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lseqDb_2eproto_getter, &descriptor_table_lseqDb_2eproto_once,
      file_level_metadata_lseqDb_2eproto[3]);
}

// ===================================================================

class PutRequest::_Internal {
 public:
};

PutRequest::PutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lseqdb.PutRequest)
}
PutRequest::PutRequest(const PutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lseqdb.PutRequest)
}

inline void PutRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:lseqdb.PutRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void PutRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lseqdb.PutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.PutRequest.key"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.PutRequest.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lseqdb.PutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.PutRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.PutRequest.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lseqdb.PutRequest)
  return target;
}

size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lseqdb.PutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutRequest::GetClassData() const { return &_class_data_; }


void PutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutRequest*>(&to_msg);
  auto& from = static_cast<const PutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lseqdb.PutRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lseqdb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {
  return true;
}

void PutRequest::InternalSwap(PutRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lseqDb_2eproto_getter, &descriptor_table_lseqDb_2eproto_once,
      file_level_metadata_lseqDb_2eproto[4]);
}

// ===================================================================

class SeekGetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SeekGetRequest>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SeekGetRequest::SeekGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lseqdb.SeekGetRequest)
}
SeekGetRequest::SeekGetRequest(const SeekGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SeekGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lseq_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lseq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lseq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lseq().empty()) {
    _this->_impl_.lseq_.Set(from._internal_lseq(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:lseqdb.SeekGetRequest)
}

inline void SeekGetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lseq_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.limit_){0u}
  };
  _impl_.lseq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lseq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SeekGetRequest::~SeekGetRequest() {
  // @@protoc_insertion_point(destructor:lseqdb.SeekGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeekGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lseq_.Destroy();
  _impl_.key_.Destroy();
}

void SeekGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SeekGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lseqdb.SeekGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lseq_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  _impl_.limit_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeekGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lseq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lseq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.SeekGetRequest.lseq"));
        } else
          goto handle_unusual;
        continue;
      // optional string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.SeekGetRequest.key"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_limit(&has_bits);
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeekGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lseqdb.SeekGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lseq = 1;
  if (!this->_internal_lseq().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lseq().data(), static_cast<int>(this->_internal_lseq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.SeekGetRequest.lseq");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lseq(), target);
  }

  // optional string key = 2;
  if (_internal_has_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.SeekGetRequest.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // optional uint32 limit = 3;
  if (_internal_has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lseqdb.SeekGetRequest)
  return target;
}

size_t SeekGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lseqdb.SeekGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lseq = 1;
  if (!this->_internal_lseq().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lseq());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional uint32 limit = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeekGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SeekGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeekGetRequest::GetClassData() const { return &_class_data_; }


void SeekGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SeekGetRequest*>(&to_msg);
  auto& from = static_cast<const SeekGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lseqdb.SeekGetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lseq().empty()) {
    _this->_internal_set_lseq(from._internal_lseq());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.limit_ = from._impl_.limit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeekGetRequest::CopyFrom(const SeekGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lseqdb.SeekGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekGetRequest::IsInitialized() const {
  return true;
}

void SeekGetRequest::InternalSwap(SeekGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lseq_, lhs_arena,
      &other->_impl_.lseq_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeekGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lseqDb_2eproto_getter, &descriptor_table_lseqDb_2eproto_once,
      file_level_metadata_lseqDb_2eproto[5]);
}

// ===================================================================

class DBItems_DbItem::_Internal {
 public:
};

DBItems_DbItem::DBItems_DbItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lseqdb.DBItems.DbItem)
}
DBItems_DbItem::DBItems_DbItem(const DBItems_DbItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBItems_DbItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lseq_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lseq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lseq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lseq().empty()) {
    _this->_impl_.lseq_.Set(from._internal_lseq(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lseqdb.DBItems.DbItem)
}

inline void DBItems_DbItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lseq_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lseq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lseq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DBItems_DbItem::~DBItems_DbItem() {
  // @@protoc_insertion_point(destructor:lseqdb.DBItems.DbItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBItems_DbItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lseq_.Destroy();
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void DBItems_DbItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBItems_DbItem::Clear() {
// @@protoc_insertion_point(message_clear_start:lseqdb.DBItems.DbItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lseq_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBItems_DbItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lseq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lseq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.DBItems.DbItem.lseq"));
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.DBItems.DbItem.key"));
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lseqdb.DBItems.DbItem.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBItems_DbItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lseqdb.DBItems.DbItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lseq = 1;
  if (!this->_internal_lseq().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lseq().data(), static_cast<int>(this->_internal_lseq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.DBItems.DbItem.lseq");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lseq(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.DBItems.DbItem.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lseqdb.DBItems.DbItem.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lseqdb.DBItems.DbItem)
  return target;
}

size_t DBItems_DbItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lseqdb.DBItems.DbItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lseq = 1;
  if (!this->_internal_lseq().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lseq());
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBItems_DbItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBItems_DbItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBItems_DbItem::GetClassData() const { return &_class_data_; }


void DBItems_DbItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBItems_DbItem*>(&to_msg);
  auto& from = static_cast<const DBItems_DbItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lseqdb.DBItems.DbItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lseq().empty()) {
    _this->_internal_set_lseq(from._internal_lseq());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBItems_DbItem::CopyFrom(const DBItems_DbItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lseqdb.DBItems.DbItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBItems_DbItem::IsInitialized() const {
  return true;
}

void DBItems_DbItem::InternalSwap(DBItems_DbItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lseq_, lhs_arena,
      &other->_impl_.lseq_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DBItems_DbItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lseqDb_2eproto_getter, &descriptor_table_lseqDb_2eproto_once,
      file_level_metadata_lseqDb_2eproto[6]);
}

// ===================================================================

class DBItems::_Internal {
 public:
};

DBItems::DBItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lseqdb.DBItems)
}
DBItems::DBItems(const DBItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBItems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.replica_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.replica_id_ = from._impl_.replica_id_;
  // @@protoc_insertion_point(copy_constructor:lseqdb.DBItems)
}

inline void DBItems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.replica_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBItems::~DBItems() {
  // @@protoc_insertion_point(destructor:lseqdb.DBItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void DBItems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBItems::Clear() {
// @@protoc_insertion_point(message_clear_start:lseqdb.DBItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.replica_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .lseqdb.DBItems.DbItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 replica_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lseqdb.DBItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lseqdb.DBItems.DbItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 replica_id = 2;
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_replica_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lseqdb.DBItems)
  return target;
}

size_t DBItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lseqdb.DBItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lseqdb.DBItems.DbItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 replica_id = 2;
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replica_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBItems::GetClassData() const { return &_class_data_; }


void DBItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBItems*>(&to_msg);
  auto& from = static_cast<const DBItems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lseqdb.DBItems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_replica_id() != 0) {
    _this->_internal_set_replica_id(from._internal_replica_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBItems::CopyFrom(const DBItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lseqdb.DBItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBItems::IsInitialized() const {
  return true;
}

void DBItems::InternalSwap(DBItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.replica_id_, other->_impl_.replica_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lseqDb_2eproto_getter, &descriptor_table_lseqDb_2eproto_once,
      file_level_metadata_lseqDb_2eproto[7]);
}

// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lseqdb.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Config* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.self_replica_id_){}
    , decltype(_impl_.max_replica_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.self_replica_id_, &from._impl_.self_replica_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_replica_id_) -
    reinterpret_cast<char*>(&_impl_.self_replica_id_)) + sizeof(_impl_.max_replica_id_));
  // @@protoc_insertion_point(copy_constructor:lseqdb.Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.self_replica_id_){0}
    , decltype(_impl_.max_replica_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:lseqdb.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:lseqdb.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.self_replica_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_replica_id_) -
      reinterpret_cast<char*>(&_impl_.self_replica_id_)) + sizeof(_impl_.max_replica_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 self_replica_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.self_replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_replica_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lseqdb.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 self_replica_id = 1;
  if (this->_internal_self_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_self_replica_id(), target);
  }

  // int32 max_replica_id = 2;
  if (this->_internal_max_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_replica_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lseqdb.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lseqdb.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 self_replica_id = 1;
  if (this->_internal_self_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_self_replica_id());
  }

  // int32 max_replica_id = 2;
  if (this->_internal_max_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_replica_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }


void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lseqdb.Config)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_self_replica_id() != 0) {
    _this->_internal_set_self_replica_id(from._internal_self_replica_id());
  }
  if (from._internal_max_replica_id() != 0) {
    _this->_internal_set_max_replica_id(from._internal_max_replica_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lseqdb.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.max_replica_id_)
      + sizeof(Config::_impl_.max_replica_id_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.self_replica_id_)>(
          reinterpret_cast<char*>(&_impl_.self_replica_id_),
          reinterpret_cast<char*>(&other->_impl_.self_replica_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lseqDb_2eproto_getter, &descriptor_table_lseqDb_2eproto_once,
      file_level_metadata_lseqDb_2eproto[8]);
}

// ===================================================================

class SyncGetRequest::_Internal {
 public:
};

SyncGetRequest::SyncGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lseqdb.SyncGetRequest)
}
SyncGetRequest::SyncGetRequest(const SyncGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replica_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.replica_id_ = from._impl_.replica_id_;
  // @@protoc_insertion_point(copy_constructor:lseqdb.SyncGetRequest)
}

inline void SyncGetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replica_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SyncGetRequest::~SyncGetRequest() {
  // @@protoc_insertion_point(destructor:lseqdb.SyncGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lseqdb.SyncGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replica_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 replica_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.replica_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lseqdb.SyncGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 replica_id = 1;
  if (this->_internal_replica_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_replica_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lseqdb.SyncGetRequest)
  return target;
}

size_t SyncGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lseqdb.SyncGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 replica_id = 1;
  if (this->_internal_replica_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replica_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncGetRequest::GetClassData() const { return &_class_data_; }


void SyncGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncGetRequest*>(&to_msg);
  auto& from = static_cast<const SyncGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lseqdb.SyncGetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_replica_id() != 0) {
    _this->_internal_set_replica_id(from._internal_replica_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncGetRequest::CopyFrom(const SyncGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lseqdb.SyncGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncGetRequest::IsInitialized() const {
  return true;
}

void SyncGetRequest::InternalSwap(SyncGetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.replica_id_, other->_impl_.replica_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lseqDb_2eproto_getter, &descriptor_table_lseqDb_2eproto_once,
      file_level_metadata_lseqDb_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lseqdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lseqdb::ReplicaKey*
Arena::CreateMaybeMessage< ::lseqdb::ReplicaKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lseqdb::ReplicaKey >(arena);
}
template<> PROTOBUF_NOINLINE ::lseqdb::Value*
Arena::CreateMaybeMessage< ::lseqdb::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lseqdb::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::lseqdb::LSeq*
Arena::CreateMaybeMessage< ::lseqdb::LSeq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lseqdb::LSeq >(arena);
}
template<> PROTOBUF_NOINLINE ::lseqdb::EventsRequest*
Arena::CreateMaybeMessage< ::lseqdb::EventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lseqdb::EventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lseqdb::PutRequest*
Arena::CreateMaybeMessage< ::lseqdb::PutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lseqdb::PutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lseqdb::SeekGetRequest*
Arena::CreateMaybeMessage< ::lseqdb::SeekGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lseqdb::SeekGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lseqdb::DBItems_DbItem*
Arena::CreateMaybeMessage< ::lseqdb::DBItems_DbItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lseqdb::DBItems_DbItem >(arena);
}
template<> PROTOBUF_NOINLINE ::lseqdb::DBItems*
Arena::CreateMaybeMessage< ::lseqdb::DBItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lseqdb::DBItems >(arena);
}
template<> PROTOBUF_NOINLINE ::lseqdb::Config*
Arena::CreateMaybeMessage< ::lseqdb::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lseqdb::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::lseqdb::SyncGetRequest*
Arena::CreateMaybeMessage< ::lseqdb::SyncGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lseqdb::SyncGetRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
